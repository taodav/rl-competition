//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.0-b26-ea3 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2006.05.02 at 05:14:34 PM EDT 
//


package org.rlcommunity.environment.octopus.config;


import java.util.ArrayList;
import java.util.List;

import org.rlcommunity.environment.octopus.config.ArmSpec;
import org.rlcommunity.environment.octopus.config.NodePairSpec;


/**
 * <p>Java class for ArmSpec complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="ArmSpec">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="nodePair" type="{}NodePairSpec" maxOccurs="unbounded" minOccurs="2"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */

public class ArmSpec {

    protected List<NodePairSpec> nodePair;

    /**
     * Gets the value of the nodePair property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the nodePair property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getNodePair().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link NodePairSpec }
     * 
     * 
     */
    public List<NodePairSpec> getNodePair() {
        return this.nodePair;
    }
    
    private void addNodePair(NodeSpec upper, NodeSpec lower){
        nodePair.add(new NodePairSpec(upper,lower));
    }
    public ArmSpec(){
            nodePair = new ArrayList<NodePairSpec>();        
            
            int numNodes = 11;
            
            /* ============================
            *   Parametrization #1
            * ============================= */
            
            // this contains the mass/upper/lower coordinates of the nodes
            // that form the octopus arm
            
            /*double [][][]nodeCoordinates = {{{0.99, 2, 0}, {0.99, 2, -1}},
                                            {{0.98, 3, 0}, {0.98, 3, -1}},
                                            {{0.71, 4, 0}, {0.71, 4, -1}},
                                            {{0.97, 5, -1}, {0.97, 5, -2}},
                                            {{0.96, 6, -1}, {0.96, 6, -2}},
                                            {{0.95, 7, -1}, {0.95, 7, -2}},
                                            {{0.84, 8, 0}, {0.84, 8, -1}},
                                            {{0.83, 9, 1}, {0.83, 9, 0}},
                                            {{0.82, 10, 2}, {0.82, 10, 1}},
                                            {{0.81, 11, 0}, {0.81, 11, -1}},
                                            {{0.71, 12, 0}, {0.71, 12, -1}}
                                            };*/
            
            /* ============================
            *   Parametrization #2
            * ============================= */
            
<<<<<<< .mine
//            double [][][]nodeCoordinates = {{{0.99, -2.6090212289328845,-2.1883341523765427}, {0.89, -3.3909787710671155,-2.8116658476234573}},
//                                            {{0.98, -2.084325397997849,-3.161923427520529}, {0.88, -2.576535337622764,-3.7235543391258905}},
//                                            {{0.97, -1.2210088658399212,-4.031935252367376}, {0.87, -1.77261763391865,-4.700000895918001}},
//                                            {{0.96, -0.40136893239456983,-4.570256015639101}, {0.76, -0.8882526013536441,-5.451005181945716}},
//                                            {{0.95, 0.5416203554749369,-4.986906130327485}, {0.75, 0.20819161266359898,-5.762869145515492}},
//                                            {{0.84, 1.5385214823155262,-5.309783189695298}, {0.74, 1.5445069794543311,-6.138361658278415}},
//                                            {{0.83, 2.7360559559673945,-5.38902876243764}, {0.73, 2.560399255178526,-6.339186601812993}},
//                                            {{0.82, 3.664547453897063,-5.315438322346245}, {0.72, 3.6002907386304193,-6.390001370109097}},
//                                            {{0.81, 4.428184508041202,-5.178203638348686}, {0.71, 4.6409815024653565,-6.29219486955389}},
//                                            {{0.71, 5.474550484347706,-5.229724044664668}, {0.61, 5.647462209140459,-6.004662673023432}},
//                                            {{0.79, 6.787491365627918,-5.162283008716537}, {0.69, 6.850952066065799,-5.947961404922088}}
//                                            };
//
=======
            /*double [][][]nodeCoordinates = {{{0.99, -2.6090212289328845,-2.1883341523765427}, {0.89, -3.3909787710671155,-2.8116658476234573}},
                                            {{0.98, -2.084325397997849,-3.161923427520529}, {0.88, -2.576535337622764,-3.7235543391258905}},
                                            {{0.97, -1.2210088658399212,-4.031935252367376}, {0.87, -1.77261763391865,-4.700000895918001}},
                                            {{0.96, -0.40136893239456983,-4.570256015639101}, {0.76, -0.8882526013536441,-5.451005181945716}},
                                            {{0.95, 0.5416203554749369,-4.986906130327485}, {0.75, 0.20819161266359898,-5.762869145515492}},
                                            {{0.84, 1.5385214823155262,-5.309783189695298}, {0.74, 1.5445069794543311,-6.138361658278415}},
                                            {{0.83, 2.7360559559673945,-5.38902876243764}, {0.73, 2.560399255178526,-6.339186601812993}},
                                            {{0.82, 3.664547453897063,-5.315438322346245}, {0.72, 3.6002907386304193,-6.390001370109097}},
                                            {{0.81, 4.428184508041202,-5.178203638348686}, {0.71, 4.6409815024653565,-6.29219486955389}},
                                            {{0.71, 5.474550484347706,-5.229724044664668}, {0.61, 5.647462209140459,-6.004662673023432}},
                                            {{0.79, 6.787491365627918,-5.162283008716537}, {0.69, 6.850952066065799,-5.947961404922088}}
                                            };*/
>>>>>>> .r677
            
            /* ============================
            *   Parametrization #3
            * ============================= */
            double [][][]nodeCoordinates = {{{0.79, 0, 1}, {0.99, 0, 0}},
                                            {{0.78, 1, 1}, {0.98, 1, 0}},
                                            {{0.77, 2, 2}, {0.97, 2, 1}},
                                            {{0.76, 3, 2}, {0.96, 3, 1}},
                                            {{0.75, 4, 1}, {0.95, 4, 0}},
                                            {{0.64, 5, 0}, {0.94, 5, -1}},
                                            {{0.63, 6, 0}, {0.93, 6, -1}},
                                            {{0.62, 7, 1}, {0.92, 7, 0}},
                                            {{0.61, 8, 1}, {0.91, 8, 0}},
                                            {{0.51, 9, 1}, {0.91, 9, 0}},
                                            {{0.59, 10, 2}, {0.99, 10, 1}}
                                            };
            
            
            
            
            for ( int i = 0; i < numNodes; i++ ){
                    NodeSpec upper = new NodeSpec( nodeCoordinates[i][0][0], 
                                                new double[]{ nodeCoordinates[i][0][1], 
                                                              nodeCoordinates[i][0][2]}, 
                                                new double[]{0.0d,0.0d});
                    NodeSpec lower = new NodeSpec( nodeCoordinates[i][1][0], 
                                                new double[]{ nodeCoordinates[i][1][1], 
                                                              nodeCoordinates[i][1][2]}, 
                                                new double[]{0.0d,0.0d});
                    addNodePair(upper,lower);
            }  
    }
    /**
     * Code from the settings .xml competition file
    <arm>
  <nodePair>
    <upper velocity='0 0' position='0 1' mass='1' />
    <lower velocity='0 0' position='0 0' mass='1' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='1 1' mass='0.9900990099' />
    <lower velocity='0 0' position='1 0' mass='0.9900990099' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='2 1' mass='0.9803921569' />
    <lower velocity='0 0' position='2 0' mass='0.9803921569' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='3 1' mass='0.9708737864' />
    <lower velocity='0 0' position='3 0' mass='0.9708737864' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='4 1' mass='0.9615384615' />
    <lower velocity='0 0' position='4 0' mass='0.9615384615' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='5 1' mass='0.9523809524' />
    <lower velocity='0 0' position='5 0' mass='0.9523809524' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='6 1' mass='0.8433962264' />
    <lower velocity='0 0' position='6 0' mass='0.8433962264' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='7 1' mass='0.8345794393' />
    <lower velocity='0 0' position='7 0' mass='0.8345794393' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='8 1' mass='0.8259259259' />
    <lower velocity='0 0' position='8 0' mass='0.8259259259' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='9 1' mass='0.8174311927' />
    <lower velocity='0 0' position='9 0' mass='0.8174311927' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='10 1' mass='0.7090909091' />
    <lower velocity='0 0' position='10 0' mass='0.7090909091' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='11 1' mass='0.7009009009' />
    <lower velocity='0 0' position='11 0' mass='0.7009009009' />
  </nodePair>
  <nodePair>
    <upper velocity='0 0' position='12 1' mass='0.7928571429' />
    <lower velocity='0 0' position='12 0' mass='0.7928571429' />
  </nodePair>
</arm>
     */

}
