import GenParamSamples
import os

method1 = "setWidth"
method2 = "setHeight"
method3 = "setRewardExponent"
method4 = "setPieceWeights"


for i in range(100):
	os.remove('./src/TPMDP%d/TPMDP%d.java'% (i,i))
	f = open('./src/TPMDP%d/TPMDP%d.java'% (i,i),'w')

	f.write("""
/*
 * This code was auto-generated by the parameter script. Do not change these values manually.
 */
package TPMDP%d;

import Tetrlais.GameState;
import Tetrlais.TetrlaisPiece;
import java.util.Vector;
import GeneralizedTetris.*;

public class TPMDP%d extends AbstractProvingMDPTetris{

    public TPMDP%d(){
	super();
	int width=0;
	int height=0;
	double []pieceWeights=null;
	double rewardExponent=1.0d;
		
	Vector<TetrlaisPiece> possibleBlocks=new Vector<TetrlaisPiece>();
        possibleBlocks.add(TetrlaisPiece.makeLine());
	possibleBlocks.add(TetrlaisPiece.makeSquare());
        possibleBlocks.add(TetrlaisPiece.makeTri());
	possibleBlocks.add(TetrlaisPiece.makeSShape());
	possibleBlocks.add(TetrlaisPiece.makeZShape());
	possibleBlocks.add(TetrlaisPiece.makeLShape());
	possibleBlocks.add(TetrlaisPiece.makeJShape());
""" % (i, i, i))
	width=GenParamSamples.sampleP1(i)
	height=GenParamSamples.sampleP2(i)+width
	rewardExponent=GenParamSamples.sampleP3(i)
	pieceWeights=GenParamSamples.sampleP4(i)
	f.write("""
	width=%d;
	height=%d;
	rewardExponent=%fd;
            """ % (width,  height, rewardExponent))
	f.write("""
	pieceWeights=new double[]{%fd, %fd, %fd, %fd, %fd, %fd, %fd};
	GameState g=new GameState(width,height,possibleBlocks,pieceWeights,rewardExponent);    
        super.gameState=g;
    }
}"""%(pieceWeights[0],pieceWeights[1],pieceWeights[2],pieceWeights[3],pieceWeights[4],pieceWeights[5],pieceWeights[6]))
	f.close()