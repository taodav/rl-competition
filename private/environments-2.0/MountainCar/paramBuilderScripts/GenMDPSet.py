import GenParamSamples
import os

# p.addDoubleParam("scaleP",1.0d);//should be between 0 and 1.0, probably not too close to 0
#  p.addDoubleParam("scaleV",1.0d);//should be between 0 and 1.0, probably not too close to 0
# 
#  
# 
#  p.addDoubleParam("pOffset",0.0d); //should be between -1.0 and 1.0, remember to adjust task spec
#  p.addDoubleParam("vOffset",0.0d); //should be between -1.0 and 1.0, remember to adjust task spec
# 
# 
#  p.addDoubleParam("pNoiseDivider",20.0d); //should be between 5.0 and 20.0
#  p.addDoubleParam("vNoiseDivider",20.0d); //should be between 5.0 and 20.0
# 
#  p.addDoubleParam("AccelBiasMean",1.0d); //should be between .8 and whatever larger, say 2.0
# 

method1 = "setScaleP"
method2 = "setScaleV"
method3 = "setPOffset"
method4 = "setVOffset"
method5 = "setPNoiseDivider"
method6 = "setVNoiseDivider"
method7 = "setAccelBiasMean"

for i in range(100):
    os.mkdir('./MCPMDP%d'% (i)) 
    f = open('./MCPMDP%d/MCPMDP%d.java'% (i,i),'w')

    f.write("""
/*
 * This code was auto-generated by the MDP script. Do not change these values manually.
 */

package MCPMDP%d;

import GeneralizedMountainCar.*;

public class MCPMDP%d extends AbstractProvingMDPMountainCar {

    public MCPMDP%d() {
        super();
        %s(%fd);
        %s(%fd);
        %s(%fd);
        %s(%fd);
        %s(%fd);
        %s(%fd);
        %s(%fd);
    }
}""" % (i,i,i,method1, GenParamSamples.sampleP1(i), method2, GenParamSamples.sampleP2(i),method3, GenParamSamples.sampleP3(i),method4, GenParamSamples.sampleP4(i),method5, GenParamSamples.sampleP5(i),method6, GenParamSamples.sampleP6(i),method7, GenParamSamples.sampleP7(i)))
    f.close()
